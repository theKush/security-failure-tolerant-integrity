doctype html
html
  head
    title Node Authentication
    |     
    link(rel='stylesheet', href='//netdna.bootstrapcdn.com/bootstrap/3.0.2/css/bootstrap.min.css')
    |     
    link(rel='stylesheet', href='//netdna.bootstrapcdn.com/font-awesome/4.0.3/css/font-awesome.min.css')
    |     
    style.
      body        { padding-top:80px; word-wrap:break-word; }
  body
    .container
      .page-header.text-center
        h1
          span.fa.fa-anchor
          |  Item Page
        |         
        a.btn.btn-default.btn-sm(href='/logout') Logout
      .col-lg-12
        a.glyphicon.glyphicon-menu-left(href="/profile")
          span.glyphicon.glyphicon-menu-left Go back
      form(id="item", method="POST", action="/item")
        lable(for='message') Message
        textarea(id="message" name="message")
        if algorithms.indexOf('4') !== -1
          lable(for='password') Password
          input#password(type='password', name='password')
        button.btn.btn-warning.btn-lg(type="submit") Buy
      .alert.alert-danger
        | #{algorithms}
  footer
    script(src="/js/jquery-2.1.3.min.js")
    script(src="/js/sha1.js")
    script(src="/js/hmac-sha1.js")
    script(src="/js/hmac-md5.js")
    script(src="/js/jsencrypt.min.js")
    script(type="text/javascript").
      var algorithms = !{JSON.stringify(algorithms)}
      var req = new XMLHttpRequest();
      req.open('GET', document.location, false);
      req.send(null);
      var startTime = Date.now();
      var crypt = new JSEncrypt();
      var key1 = req.getResponseHeader('key1');
      var key2 = req.getResponseHeader('key2'); 
      var pubkey = req.getResponseHeader('pubkey');
      $("#item").submit(function(e) {
        e.preventDefault();
        var serialized = $('form').serialize();

        req.open('POST', '/item', true);
        
        if(algorithms.indexOf('1') !== -1){
          var plainhash = CryptoJS.SHA1(serialized);
          req.setRequestHeader('plainhash', plainhash);
        }
        if(algorithms.indexOf('2') !== -1){    
          var keyhash = CryptoJS.HmacSHA1(serialized, key1);
          req.setRequestHeader('keyhash', keyhash);
        }
        if(algorithms.indexOf('3') !== -1){     
          var symkey = Math.floor(Math.random()*101);
          symkey = symkey.toString();
          var pkihash = CryptoJS.HmacSHA1(serialized, symkey);
          crypt.setKey(pubkey);
          var encrypted = crypt.encrypt(symkey);
          req.setRequestHeader('pkihash', pkihash);
          req.setRequestHeader('symkey', encrypted);
        }
        if(algorithms.indexOf('4') !== -1){
          var passwordhash = CryptoJS.HmacSHA1(serialized, $('#password').val());
          req.setRequestHeader('passwordhash', passwordhash);
        }
        if(algorithms.indexOf('5') !== -1){
          var sid = document.cookie.match('connect.sid=([^;]*)')[1];
          sid = sid.substring(4, sid.indexOf('.'));
          if (sid.indexOf('%') != -1){
            sid = sid.replace(/%2B/gi, "+");
            sid = sid.replace(/%2F/gi, "/")
          }
          var sessionhash = CryptoJS.HmacSHA1(serialized, sid);
          req.setRequestHeader('sessionhash', sessionhash);
        }
        if(algorithms.indexOf('6') !== -1){    
          var firsthash = CryptoJS.HmacSHA1(serialized, key1);
          var secondhash = CryptoJS.HmacMD5(serialized, key2);
          req.setRequestHeader('firsthash', firsthash);
          req.setRequestHeader('secondhash', secondhash);
        }
        var endTime = Date.now();
        var processingTime = endTime - startTime;
        req.onreadystatechange = function() {
          if(req.readyState == 4 && req.status == 200) {
            alert(req.responseText + "\n Client Processing Time: " + processingTime + " msec");
          }
        }
        req.send(serialized);
      });




      